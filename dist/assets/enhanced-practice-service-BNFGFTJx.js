import{c as I,N as p,I as r,i as a,U as A,h as o,M as n,O as R,w as y,J as S,S as m,T as l,s as w,a4 as f,Q as j}from"./index-CWgw_Ts5.js";/**
 * @license lucide-react v0.475.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Q=[["path",{d:"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2",key:"1yyitq"}],["circle",{cx:"9",cy:"7",r:"4",key:"nufk8"}],["path",{d:"M22 21v-2a4 4 0 0 0-3-3.87",key:"kshegd"}],["path",{d:"M16 3.13a4 4 0 0 1 0 7.75",key:"1da9ce"}]],B=I("Users",Q),P=[{id:"logical-reasoning",name:"Logical Reasoning",category:"aptitude",description:"Develop analytical thinking and problem-solving skills through logical reasoning questions",lessons:[],totalQuestions:0,estimatedHours:15,difficulty:"Medium",prerequisites:[],learningPath:["basic-logic","pattern-recognition","analytical-reasoning","critical-thinking"],tags:["logic","reasoning","patterns","analysis"],icon:"🧠",color:"#3B82F6",isActive:!0,createdBy:"admin",createdAt:new Date,updatedAt:new Date,analytics:{totalAttempts:0,averageScore:0,completionRate:0,popularQuestions:[]}},{id:"quantitative-aptitude",name:"Quantitative Aptitude",category:"aptitude",description:"Master mathematical concepts and numerical problem-solving techniques",lessons:[],totalQuestions:0,estimatedHours:20,difficulty:"Hard",prerequisites:["basic-mathematics"],learningPath:["arithmetic","algebra","geometry","data-interpretation","advanced-math"],tags:["mathematics","numbers","calculations","data"],icon:"📊",color:"#10B981",isActive:!0,createdBy:"admin",createdAt:new Date,updatedAt:new Date,analytics:{totalAttempts:0,averageScore:0,completionRate:0,popularQuestions:[]}},{id:"verbal-ability",name:"Verbal Ability",category:"aptitude",description:"Enhance language skills, vocabulary, and reading comprehension abilities",lessons:[],totalQuestions:0,estimatedHours:12,difficulty:"Easy",prerequisites:[],learningPath:["vocabulary","grammar","reading-comprehension","verbal-reasoning"],tags:["language","vocabulary","grammar","comprehension"],icon:"📚",color:"#8B5CF6",isActive:!0,createdBy:"admin",createdAt:new Date,updatedAt:new Date,analytics:{totalAttempts:0,averageScore:0,completionRate:0,popularQuestions:[]}}],q=[{id:"first-lesson",name:"Getting Started",description:"Complete your first lesson",icon:"🎯",category:"progress",criteria:{type:"completion",value:1,condition:"greater_than"},reward:{points:10,badge:"starter"},isActive:!0,createdAt:new Date},{id:"perfect-score",name:"Perfect Score",description:"Score 100% on any lesson",icon:"⭐",category:"performance",criteria:{type:"score",value:100,condition:"equal_to"},reward:{points:50,badge:"perfectionist"},isActive:!0,createdAt:new Date},{id:"week-streak",name:"Consistent Learner",description:"Practice for 7 consecutive days",icon:"🔥",category:"consistency",criteria:{type:"streak",value:7,condition:"greater_than"},reward:{points:100,badge:"consistent"},isActive:!0,createdAt:new Date}];class U{constructor(){this.subjects=[],this.isInitialized=!1}async initialize(){if(!this.isInitialized)try{const e=await p(r(a,"practiceSubjects"));e.empty?await this.createDefaultSubjects():this.subjects=e.docs.map(t=>({id:t.id,...t.data()})),await this.initializeAchievements(),this.isInitialized=!0}catch(e){throw e}}async createDefaultSubjects(){const e=A(a);for(const t of P){const s=o(a,"practiceSubjects",t.id);e.set(s,{...t,createdAt:n(),updatedAt:n()})}await e.commit(),this.subjects=P}async initializeAchievements(){if((await p(r(a,"achievements"))).empty){const t=A(a);for(const s of q){const i=o(a,"achievements",s.id);t.set(i,{...s,createdAt:n()})}await t.commit()}}async getSubjects(){return this.isInitialized||await this.initialize(),this.subjects}async getSubject(e){const t=await R(o(a,"practiceSubjects",e));return t.exists()?{id:t.id,...t.data()}:null}async updateSubjectAnalytics(e,t){const s=o(a,"practiceSubjects",e);await y(s,{analytics:t,updatedAt:n()})}async createPracticeSession(e){return(await S(r(a,"practiceSessions"),{...e,startTime:n(),createdAt:n()})).id}async updatePracticeSession(e,t){const s=o(a,"practiceSessions",e);await y(s,{...t,updatedAt:n()})}async getUserProgress(e,t){const s=m(r(a,"userProgress"),l("userId","==",e),l("subjectId","==",t));return(await p(s)).docs.map(h=>({...h.data()}))}async updateUserProgress(e){const t=`${e.userId}_${e.subjectId}_${e.lessonId}_${e.questionId}`,s=o(a,"userProgress",t);await w(s,{...e,lastAttemptDate:n()},{merge:!0})}async createStudyPlan(e){return(await S(r(a,"studyPlans"),{...e,createdAt:n(),updatedAt:n()})).id}async getUserStudyPlans(e){const t=m(r(a,"studyPlans"),l("userId","==",e),f("createdAt","desc"));return(await p(t)).docs.map(i=>({id:i.id,...i.data()}))}async updateStudyPlanProgress(e,t){const s=o(a,"studyPlans",e);await y(s,{progress:t,updatedAt:n()})}async getUserAchievements(e){const t=m(r(a,"userAchievements"),l("userId","==",e));return(await p(t)).docs.map(i=>({...i.data()}))}async awardAchievement(e,t){const s=`${e}_${t}`,i=o(a,"userAchievements",s);await w(i,{userId:e,achievementId:t,unlockedAt:n(),progress:100,isCompleted:!0})}async getSessionAnalytics(e,t="month"){const s=new Date;switch(t){case"week":s.setDate(s.getDate()-7);break;case"month":s.setMonth(s.getMonth()-1);break;case"year":s.setFullYear(s.getFullYear()-1);break}const i=m(r(a,"practiceSessions"),l("userId","==",e),l("startTime",">=",s),f("startTime","desc")),d=(await p(i)).docs.map(c=>({id:c.id,...c.data()})),b=d.length,D=d.reduce((c,u)=>c+u.duration,0),k=d.reduce((c,u)=>c+u.score,0)/b||0,g=d.reduce((c,u)=>c+u.totalQuestions,0),v=d.reduce((c,u)=>c+u.correctAnswers,0);return{totalSessions:b,totalTimeSpent:D,averageScore:k,totalQuestions:g,correctAnswers:v,accuracy:g>0?v/g*100:0,sessions:d.slice(0,10)}}subscribeToSubject(e,t){const s=o(a,"practiceSubjects",e);return j(s,i=>{i.exists()?t({id:i.id,...i.data()}):t(null)})}subscribeToUserProgress(e,t){const s=m(r(a,"userProgress"),l("userId","==",e));return j(s,i=>{const h=i.docs.map(d=>({...d.data()}));t(h)})}}const M=new U;export{B as U,M as e};
